<<<<<<< HEAD
#!/usr/bin/perl

  if(! defined($ENV{NETCDF_INC})){
     if(defined($ENV{NETCDF})) {
       $tt = `echo "NETCDF_INC = \${NETCDF}/include" > macros.tmp` ; 
     } else {
        print"Error: environment variable NETCDF_INC not defined. \n";
        exit(0);
     }
   }

  ${NETCDF_LIB} = $ENV{NETCDF_LIB};
  if(! defined($ENV{NETCDF_LIB})){
     if(defined($ENV{NETCDF})) {
       $tt = `echo "NETCDF_LIB = \${NETCDF}/lib" >> macros.tmp` ; 
       ${NETCDF_LIB} = $ENV{NETCDF}."/lib";
     } else {
       print"Error: environment variable NETCDF_LIB not defined. \n";
       exit(0);
     }
  }
  
  if(! -e "${NETCDF_LIB}/libnetcdff.a"){
    $tt = `echo "NETCDFLIB       =       -L${NETCDF_LIB} -lnetcdf" >> macros.tmp `;
  }

  if(-e macros) {system (rm -f macros);}
#  if(-e Makefile) {system "rm -f Makefile" ;}

#  system("cp arc/Makefile ."); 

  if($#ARGV == 0) {
     $response = shift(@ARGV) ;
     print("Configure hydro: $response \n");
  }else {
     print "Please select from following supported options. \n\n";

     print "   1. Linux PGI compiler sequential \n";
     print "   2. Linux PGI compiler dmpar \n";
     print "   3. IBM AIX compiler sequential, xlf90_r\n";
     print "   4. IBM AIX compiler dmpar \n";
     print "   5. Linux gfort compiler sequential \n";
     print "   6. Linux gfort compiler dmpar      \n";
     print "   7. Linux ifort compiler sequential \n";
     print "   8. Linux ifort compiler dmpar      \n";
     print "   9. Linux ifort compiler dmpar (WCOSS Luna)   \n";
     print "   0. exit only \n";

     printf "\nEnter selection [%d-%d] : ",0,9 ;

     $response = <STDIN> ;
     chop($response);
  }

  use Switch;
  switch ($response) {
     case 1 { 
              # sequential linux 
              system "cp arc/macros.seq.linux macros"; 
              system "cp arc/Makefile.seq Makefile.comm"; 
            }

     case 2 {
              # mpp linux 
              system "cp arc/macros.mpp.linux macros"; 
              system "cp arc/Makefile.mpp Makefile.comm"; 
            }

     case 3 {
              # sequential IBM AIX
              system "cp arc/macros.seq.IBM.xlf90_r macros"; 
              system "cp arc/Makefile.seq Makefile.comm"; 
            }

     case 4 {
              # mpp IBM AIX
              system "cp arc/macros.mpp.IBM.xlf90_r macros"; 
              system "cp arc/Makefile.mpp Makefile.comm"; 
            }

     case 5 {
              # GFORTRAN only                         
              system "cp arc/macros.seq.gfort macros"; 
              system "cp arc/Makefile.seq Makefile.comm"; 
            }

      case 6 {
               # GFORTRAN dmpar only                         
               system "cp arc/macros.mpp.gfort macros"; 
               system "cp arc/Makefile.mpp Makefile.comm"; 
             }
      case 7 {
               # ifort sequential                            
               system "cp arc/macros.seq.ifort macros"; 
               system "cp arc/Makefile.seq Makefile.comm"; 
             }
      case 8 {
               # ifort    dmpar only                         
               system "cp arc/macros.mpp.ifort macros"; 
               system "cp arc/Makefile.mpp Makefile.comm"; 
             }
      case 9 {
               # ifort Luna   dmpar only                         
               system "cp arc/macros.mpp.ifort.luna macros"; 
               system "cp arc/Makefile.mpp Makefile.comm"; 
             }

     else   {print "no selection $response\n"; last} 
  }
  if(! (-e lib)) {mkdir lib;}
  if(! (-e mod)) {mkdir mod;}
  if(-e "macros.tmp")  { system("cat macros macros.tmp > macros.a; rm -f macros.tmp; mv macros.a macros");}
  # if((-d "LandModel") ) {system "cat macros LandModel/user_build_options.bak  > LandModel/user_build_options";}
=======
#!/bin/bash

theArgument=$1

###################################
## Setup the NetCDF include and LIB variables.
## If Neither is set and $NETCDF is not set,
## then try nc-config. If that fails, all fails.

if [[ -z $NETCDF_INC ]]; then
    if [[ -z $NETCDF ]]; then
	NETCDF_INC=`nc-config --includedir 2> /dev/null`
    else
	NETCDF_INC=${NETCDF}/include
    fi
    if [[ -z $NETCDF_INC ]]; then
	echo "Error: environment variable NETCDF_INC not defined."
	exit 1
    fi
    echo "NETCDF_INC = ${NETCDF_INC}" > macros.tmp
fi

if [[ -z $NETCDF_LIB ]]; then
    if [[ -z $NETCDF ]]; then
	NETCDF_LIB=`nc-config --libs | cut -c3- | cut -d' ' -f1`
    else
	NETCDF_LIB=${NETCDF}/lib
    fi
    if [[ -z $NETCDF_LIB ]]; then
	echo "Error: environment variable NETCDF_LIB not defined."
	exit 1
     fi
    echo "NETCDF_LIB = ${NETCDF_LIB}" >> macros.tmp
fi

if [[ ! -e ${NETCDF_LIB}/libnetcdff.a ]]; then
    echo "NETCDFLIB       =       -L${NETCDF_LIB} -lnetcdf" >> macros.tmp 
fi
 
###################################
## File/dir setups
if [[ -e macros ]]; then rm -f macros; fi
if [[ ! -e lib ]]; then mkdir lib; fi
if [[ ! -e mod ]]; then mkdir mod; fi


###################################
## If no argument was supplied, get all interactive.
if [[ -z $theArgument ]]; then
    echo "Please select from following supported linux compilers"
    echo "using either the number or key (not case sensitive):"
    echo 
    echo "Number    Key  Description"
    echo "--------------------------------------------"
    echo "     1    pgi  PGI parallel"
    echo "     2  gfort  gfortran parallel"
    echo "     3  ifort  intel parallel (incl. Theia)"
    echo "     4   luna  ifort parallel (WCOSS Luna)"
    echo "     0   exit  exit"
    echo 
    read -p "Enter selection: " theArgument
    echo
fi

## remove case sensitivity
theArgument=`echo $theArgument | tr '[:upper:]' '[:lower:]'`


###################################
## What to do with the choice

if [[ $theArgument -eq 1 ]] || [[ $theArgument == pgi ]]; then
    cp arc/macros.mpp.linux macros 
    cp arc/Makefile.mpp Makefile.comm 
    echo "Configured: PGI"
fi

if [[ $theArgument -eq 2 ]] || [[ $theArgument == gfort ]]; then
    cp arc/macros.mpp.gfort macros 
    cp arc/Makefile.mpp Makefile.comm
    echo "Configured: gfort"
fi

if [[ $theArgument -eq 3 ]] || [[ $theArgument == ifort ]]; then
    ## theia login machines self identify as "tfe" and have
    ## their own intel macros. We handle luna more explicitly... 
    if [[ $HOSTNAME != *tfe* ]]; then
	cp arc/macros.mpp.ifort macros 
	echo "Configured: ifort"
    else
	cp arc/macros.mpp.ifort.theia macros
	echo "Configured: ifort on Theia"
    fi
    cp arc/Makefile.mpp Makefile.comm
fi

if [[ $theArgument -eq 4 ]] || [[ $theArgument == luna ]]; then
    cp arc/macros.mpp.ifort.luna macros 
    cp arc/Makefile.mpp Makefile.comm
    echo "Configured: ifort on Luna"
fi

## The above result in a new macros file which was
## previously deleted. If it does not exist, none
## were chosen.
if [[ ! -e macros ]]; then
    echo "No compiler selected. Exiting"
    if [[ -e macros.tmp ]]; then rm -f macros.tmp; fi
    # failure
    exit 1
fi

# PGI sequential
# cp arc/macros.seq.linux macros
# cp arc/Makefile.seq Makefile.comm
# gfortran sequential                         
#zystem "cp arc/macros.seq.gfort macros 
#cp arc/Makefile.seq Makefile.comm 
# ifort sequential                            
#cp arc/macros.seq.ifort macros 
#cp arc/Makefile.seq Makefile.comm

if [[ -e macros.tmp ]]; then
    cat macros macros.tmp > macros.a
    rm -f macros.tmp
    mv macros.a macros
fi

## success
exit 0
>>>>>>> b1b191b5bc4e1e579b5a1fc399451b14a647f834
